# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jK4-Eyg3TYMsYTdYEUur_TymVKAKvc58
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/fizyr/keras-retinanet
# %cd keras-retinanet

from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
import keras

# import keras_retinanet
from keras_retinanet import models
from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image
from keras_retinanet.utils.visualization import draw_box, draw_caption
from keras_retinanet.utils.colors import label_color


# import miscellaneous modules
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

trainingci=np.ndarray((4*25*2,1),dtype='<U500')
testci=np.ndarray((4*3*2,1),dtype='<U500')
validationcu=np.ndarray((4*2*2,1),dtype='<U500')
labeltra=np.ndarray((4*25*2,1),dtype='<U500')
labelval=np.ndarray((4*2*2,1),dtype='<U500')
labeltest=np.ndarray((4*3*2,1),dtype='<U500')

tra=0
te=0
va=0
for i in range(4):
  for k in range(11):
    if k==0:
      for j in range(30):
        if j>26:
         testci[te,0]='/content/drive/My Drive/senz3d_dataset/senz3d_dataset/acquisitions/S%i/G%i/%i-color.png'%(i+1,k+1,j+1) 
         labeltest[te,0]='G1'
         te=te+1
        if j<27 and j>24:
          validationcu[va,0]=('/content/drive/My Drive/senz3d_dataset/senz3d_dataset/acquisitions/S%i/G%i/%i-color.png'%(i+1,k+1,j+1))
          labelval[va,0]='G1'
          va=va+1
        if j<25:
          im=('/content/drive/My Drive/senz3d_dataset/senz3d_dataset/acquisitions/S%i/G%i/%i-color.png'%(i+1,k+1,j+1))
          trainingci[tra,0]=im
          labeltra[tra,0]='G1'
          tra=tra+1

for i in range(4):
  for k in range(11):
    o=1
    if k==4:
      for j in range(30):
        if j>26:
          testci[te,0]=('/content/drive/My Drive/senz3d_dataset/senz3d_dataset/acquisitions/S%i/G%i/%i-color.png'%(i+1,k+1,j+1))
          labeltest[te,0]='G5'
          te=te+1
        if j<27 and j>24:
          validationcu[va,0]=('/content/drive/My Drive/senz3d_dataset/senz3d_dataset/acquisitions/S%i/G%i/%i-color.png'%(i+1,k+1,j+1))
          labelval[va,0]='G5'
          va=va+1
        if j<25:
          im=('/content/drive/My Drive/senz3d_dataset/senz3d_dataset/acquisitions/S%i/G%i/%i-color.png'%(i+1,k+1,j+1))
          trainingci[tra,0]=im
          labeltra[tra,0]='G5'
          tra=tra+1

trainci=pd.DataFrame({'Images':trainingci[:,0],'Labels':labeltra[:,0]})
valci=pd.DataFrame({'Images':validationcu[:,0],'Labels':labelval[:,0]})
teci=pd.DataFrame({'Images':testci[:,0],'Labels':labeltest[:,0]})

traindf=trainci
testdf=teci
valdf=valci
datagen=ImageDataGenerator(rescale=1./255)
valgen=ImageDataGenerator(rescale=1./255)

train_generator=datagen.flow_from_dataframe(
dataframe=traindf,

x_col='Images',
y_col='Labels',
subset="training",
batch_size=8,
seed=42,
shuffle=True,
class_mode="categorical",
target_size=(32,32))


valid_generator=valgen.flow_from_dataframe(
dataframe=valdf,

x_col='Images',
y_col='Labels',

batch_size=8,
seed=42,
shuffle=True,
class_mode="categorical",
target_size=(32,32))

test_datagen=ImageDataGenerator(rescale=1./255.)

test_generator=test_datagen.flow_from_dataframe(
dataframe=testdf,

x_col='Images',
y_col=None,
batch_size=8,
seed=42,
shuffle=False,
class_mode=None,
target_size=(32,32))

from tensorflow.keras.applications.xception import Xception
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.metrics import Recall,Precision,Accuracy
import tensorflow_addons as tfa
threshold = 0.9

base_model = Xception(weights='imagenet', include_top=False)
x=base_model.output
x=GlobalAveragePooling2D()(x)
x=Dropout(0.2)(x)
x=Dense(100,activation='relu')(x)
x=Dropout(0.2)(x)
predictions=Dense(2,activation='softmax')(x)


model=Model(inputs=base_model.input,outputs=predictions)

for layer in base_model.layers:
    layer.trainable = False


model.compile(optimizer='Adam', loss='categorical_crossentropy',metrics=['accuracy','Recall','Precision',tfa.metrics.FBetaScore(num_classes=2, average="macro", threshold = threshold)])

STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size
STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size
STEP_SIZE_TEST=test_generator.n//test_generator.batch_size
model.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=5)

test_generator.reset()
pred=model.predict_generator(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)
labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

from sklearn.metrics import accuracy_score, recall_score,precision_score,f1_score
egitim1_acc=accuracy_score(teci['Labels'],predictions)
egitim1_recall=recall_score(teci['Labels'],predictions,average='macro')
egitim1_precision=precision_score(teci['Labels'],predictions,average='macro')
egitim1_f1=f1_score(teci['Labels'],predictions,average='macro')
print('Eğitim1\nTest verisi için:\naccuracy= %f\nrecall= %f\nprecision= %f\nf1= %f'%(egitim1_acc,egitim1_recall,egitim1_precision,egitim1_f1))

for layer in model.layers[:128]:
   layer.trainable = False
for layer in model.layers[128:]:
   layer.trainable = True
from tensorflow.keras.optimizers import SGD
model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy','Recall','Precision',tfa.metrics.FBetaScore(num_classes=2, average="macro", threshold = threshold)])
model.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=5)
test_generator.reset()
pred=model.predict_generator(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)
labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

acc1=accuracy_score(teci['Labels'],predictions)
recall1=recall_score(teci['Labels'],predictions,average='macro')
precision1=precision_score(teci['Labels'],predictions,average='macro')
f11=f1_score(teci['Labels'],predictions,average='macro')
print('Eğitim2_1\nTest verisi için:\naccuracy= %f\nrecall= %f\nprecision= %f\nf1= %f'%(acc1,recall1,precision1,f11))

for layer in model.layers[:128]:
   layer.trainable = False
for layer in model.layers[128:]:
   layer.trainable = True
from tensorflow.keras.optimizers import SGD
model.compile(optimizer=SGD(lr=0.0001, momentum=0.7), loss='categorical_crossentropy',metrics=['accuracy','Recall','Precision',tfa.metrics.FBetaScore(num_classes=2, average="macro", threshold = threshold)])
model.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=5)
test_generator.reset()
pred=model.predict_generator(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)
labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

acc2=accuracy_score(teci['Labels'],predictions)
recall2=recall_score(teci['Labels'],predictions,average='macro')
precision2=precision_score(teci['Labels'],predictions,average='macro')
f12=f1_score(teci['Labels'],predictions,average='macro')
print('Eğitim2_2\nTest verisi için:\naccuracy= %f\nrecall= %f\nprecision= %f\nf1= %f'%(acc2,recall2,precision2,f12))

for layer in model.layers[:128]:
   layer.trainable = False
for layer in model.layers[128:]:
   layer.trainable = True
from tensorflow.keras.optimizers import SGD
model.compile(optimizer=SGD(lr=0.0001, momentum=0.9), loss='categorical_crossentropy',metrics=['accuracy','Recall','Precision',tfa.metrics.FBetaScore(num_classes=2, average="macro", threshold = threshold)])

model.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=5)
test_generator.reset()
pred=model.predict_generator(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)
labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

acc3=accuracy_score(teci['Labels'],predictions)
recall3=recall_score(teci['Labels'],predictions,average='macro')
precision3=precision_score(teci['Labels'],predictions,average='macro')
f13=f1_score(teci['Labels'],predictions,average='macro')
print('Eğitim2_3\nTest verisi için:\naccuracy= %f\nrecall= %f\nprecision= %f\nf1= %f'%(acc3,recall3,precision3,f13))

for layer in model.layers[:128]:
   layer.trainable = False
for layer in model.layers[128:]:
   layer.trainable = True
from tensorflow.keras.optimizers import SGD
model.compile(optimizer=SGD(lr=0.0001, momentum=0.98), loss='categorical_crossentropy',metrics=['accuracy','Recall','Precision',tfa.metrics.FBetaScore(num_classes=2, average="macro", threshold = threshold)])

model.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=5)
test_generator.reset()
pred=model.predict_generator(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)
labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

acc4=accuracy_score(teci['Labels'],predictions)
recall4=recall_score(teci['Labels'],predictions,average='macro')
precision4=precision_score(teci['Labels'],predictions,average='macro')
f14=f1_score(teci['Labels'],predictions,average='macro')
print('Eğitim2_4\nTest verisi için:\naccuracy= %f\nrecall= %f\nprecision= %f\nf1= %f'%(acc4,recall4,precision4,f14))

def insertionSort(arr): 
  
    # Traverse through 1 to len(arr) 
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
arr = [acc1,acc2 ,acc3 ,acc4] 
insertionSort(arr)
print(arr)

arr={'Accuracy_Değerleri':[acc1,acc2,acc3,acc4],'Label':['Eğitim2_1','Eğitim2_2','Eğitim2_3','Eğitim2_4'],'Labels':['0','1','2','3']
}
egitim2_accuracyler=pd.DataFrame(arr)

#for i in range[1,len(egitim2_accuracyler)]
deger=egitim2_accuracyler['Accuracy_Değerleri']
labels=egitim2_accuracyler['Label']
print(egitim2_accuracyler)

enaz=min(deger)
enfazla=max(deger)
deger2= egitim2_accuracyler[egitim2_accuracyler.Accuracy_Değerleri != enaz]
deger2=deger2[deger2.Accuracy_Değerleri !=enfazla]
degeryeni=deger2['Accuracy_Değerleri']
degeryenilabel=deger2['Label']
degeryenil=deger2['Labels']


enaz2=min(degeryeni)

deger3=deger2
degeryenila=degeryenil
for i in range(len(degeryenil)):
  ic=int(min(degeryenila))
  degeryenila=deger3['Labels'] 
  deger3=deger3[deger3.Labels != str(ic)]
  key=deger[ic]
  label=degeryenilabel[ic]
  if enaz2==key:
    enazlabel2=label
    break

for i in range(len(degeryenila)):
  degeryenila=deger3['Labels']
  ic=int(min(degeryenila))

  key=deger[ic]
  label=labels[ic]
  enfazla2=key
  if enfazla2==key:
    enfazlalabel2=label
    break

for i in range(len(deger)):
  key=deger[i]
  lab=labels[i]
  if enaz==key:
    enazlabel=lab
  if enfazla==key:
    enfazlalabel=lab

print('Eğitimlerin büyükten küçüğe sıralanmış accuracy değerleri:\n',
      '%s = %f'%(enfazlalabel,enfazla),
      '\n%s = %f'%(enfazlalabel2,enfazla2),
      '\n%s = %f'%(enazlabel2,enaz2),
      '\n%s = %f'%(enazlabel,enaz))